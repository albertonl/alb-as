import smtplib
import time
from datetime import datetime

from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.header import Header

from .auth import *
from .alb_as import *

def emailer(db, new_courses, new_tasks, start_time, testing=False):
    print("Generating email text...")
    sent_from = gmail_user
    to = gmail_to
    sent_time = datetime.now().strftime('%Y/%m/%d %H:%M:%S')
    subject = "[ALB-AS] Aules update for user %s (%s)" % (username, sent_time)
    body = "Aules update report for user %s via ALB AulesScraper v0.1alpha. This is an automated message.\nTime of update: %s\n\n" % (username, sent_time)

    # check courses
    if new_courses:
        course_list = '('
        for i in range(0, len(new_courses)):
            course_list += str(new_courses[i])
            if i != len(new_courses)-1:
                course_list += ', '
        course_list += ')'

        courses_db = []
        for course_id in new_courses:
            courses_db.append(db.execute("SELECT * FROM courses WHERE cid = :cid", {"cid": course_id}).fetchone())
        body += "NEW COURSES (%s):\n" % (len(courses_db))
        for course in courses_db:
            body += "  - NEW COURSE (ID: %s): %s\n    %s\n" % (course['cid'], course['cname'], course['curl'])
        body += "\n"

    # check tasks
    if new_tasks:
        id_list = '('
        for i in range(0, len(new_tasks)):
            id_list += new_tasks[i]
            if i != len(new_tasks)-1:
                id_list += ', '
        id_list += ')'

        tasks_db = []
        for task_id in new_tasks:
            tasks_db.append(db.execute("SELECT * FROM tasks WHERE tid = :tid", {"tid": task_id}).fetchone())
        tasks_by_course = {}
        body += "NEW TASKS (%s):\n" % (len(tasks_db))

        for task in tasks_db:
            if str(task['cid_fk']) not in tasks_by_course:
                tasks_by_course[str(task['cid_fk'])] = [task]
            else:
                tasks_by_course[str(task['cid_fk'])].append(task)

        for cid in tasks_by_course:
            task_course = db.execute("SELECT cname FROM courses WHERE cid = :cid", {"cid": int(cid)}).fetchone()
            body += "NEW TASKS IN COURSE %s (%s):\n" % (task_course['cname'], len(tasks_by_course[cid]))
            for task in tasks_by_course[cid]:
                body += "  - NEW TASK (ID: %s, TYPE: %s): %s\n    %s\n" % (task['tid'], task['type'], task['tname'], task['turl'])
    elif not new_courses and not new_tasks:
        body += "We have not found any courses nor tasks recently added to your account.\nEnjoy your day!\n"
    body += "\n"
    course_count = db.execute("SELECT COUNT(*) FROM courses").fetchone()
    task_count = db.execute("SELECT COUNT(*) FROM tasks").fetchone()

    body += "Total new courses fetched: %s\n" % (len(new_courses))
    body += "Total new tasks fetched: %s\n" % (len(new_tasks))
    body += "Total analyzed courses: %s\n" % (course_count[0])
    body += "Total analyzed tasks: %s\n" % (task_count[0])
    body += "Analysis runtime: %s seconds" % (time.time() - start_time)

    footer = "This file has been automatically generated by\n%s (%s)\n(C) ALB Developers Team, %s\n%s" % (software_name, software_code, datetime.now().strftime('%Y'), software_repo_url)
    email_text = """\
    %s

    %s
    """ % (body, footer)
    if testing:
        return email_text
    msg = MIMEText(email_text.encode('utf-8'), _charset='utf-8')
    msg['From'] = sent_from
    msg['To'] = to
    msg['Subject'] = Header(subject, "utf-8")

    try:
        server = smtplib.SMTP_SSL('smtp.gmail.com', 465)
        server.ehlo()
        server.login(gmail_user, gmail_password)
        print("Sending email...")
        server.sendmail(sent_from, to, msg.as_string())
        server.close()
    except:
        raise RuntimeError("[SMTP ERROR]: Something went wrong when connecting.")
    print("Email sent!")
